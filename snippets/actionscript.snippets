# CLASS
snippet package
	package ${1:// package} 
	{
		import flash.display.$4;

		public class ${2:`Filename('', 'Foo')`} ${3:extends} ${4:Sprite}
		{
			public function $2(${3:/* arguments */})
			{
			}
			${5}
		}
	}

# IMPORTS
snippet imfd
	import flash.display.${1:MovieClip};${2}
snippet imfe
	import flash.events.${1:Event};${2}

# METADATA
snippet embed
	[Embed(source="${1:../assets/}")]
	private var ${2:embeddedName}:Class
snippet [SWF]
	[SWF(width="${1:900}", height="${2:450}", frameRate="${3:31}", backgroundColor="${4:#FFFFFF}")]

# COMMENTS
snippet /**
	/**
	 * ${1:}
	 */

# VARIABLES
snippet var
	${2:public} var ${1:varName}:${3:Type};${4}
snippet const
	${1:public} static const ${2:varName}:${3:Type} = ${4:};${5}

# EVENTS
snippet add
	addEventListener(${1:EventType}, ${2:functionName});${3}
snippet rem
	removeEventListener(${1:EventType}, ${2:functionName});${3}
snippet disp
	dispatchEvent(new Event(${1:EventType}));${2}
snippet e:e
	event:Event${1}
snippet e:m
	event:MouseEvent${1}

# FUNCTIONS
snippet fun
	/**
	 * ${5}
	 */
	${2:public} function ${1:functionName}(${3:/ * arguments */}):${4:void}
	{
		${6:trace(this.name, '$1')};
	}
snippet fune
	/**
	 * @param event	$2
	 */
	private function ${1:functionName}(event:${2:Type}):void
	{
		${3:trace(this.name, '$1', event.target.name)};
	}${4}
snippet set
	public function set ${1:functionName}(value:${2:Type}):void
	{
		_$1 = value;
	}${3}
snippet get
	public function get ${1:functionName}():${2:Type}
	{
		return _$1;
	}${3}

# LOOPS
snippet if
	if (${1:/* condition */}) 
	{
		${2:// TODO}
	}
snippet else
	else
	{
		${1:// TODO}
	}
snippet elseif
	else if (${1:/* condition */}) 
	{
		${2:// TODO}
	}
snippet ife
	if (${1:/* condition */}) 
	{
		${2:// TODO}
	}
	else
	{
		${3:// TODO}
	}
snippet for
	for (var ${2:i}:${3:int} = 0; $2 < ${1:count}; $2++) 
	{
		${4:// TODO}
	}
snippet each
	for each (var ${1:value}:${2:Type} in ${3:list}) {
		${4:// TODO}
	}
snippet switch
	switch (${1:/* condition */}) 
	{
		case ${2:/* value */}:
			${3:// TODO}
			break;
		${5}
		default:
			${4:// TODO}
			break;
	}
snippet case
	case ${1:/* value */}:
		${2:// TODO}
		break;${3}

# FUNCTION CALLS
snippet trace
	trace(${1: /* arguments */});

# PROFILING
snippet imug
	import flash.utils.getTimer;
snippet starttime
	var startTime:int = getTimer();
snippet elapsedtime
	var elapsedTime:int = getTimer() - startTime;

# MONSTER DEBUGGER
snippet immd
	import nl.demonsters.debugger.MonsterDebugger;${1}
snippet mdt
	MonsterDebugger.trace(this, ${1:/* arguments */});${2}

# THUNDERBOLT DEBUGGER
snippet imtd
	import org.osflash.thunderbolt.Logger;${1}
snippet thl
	Logger.${1:debug}('${2:description}', ${3:...rest});${3}

# TWEENMAX
snippet imgs
	import com.greensock.TweenMax;
	import com.greensock.easing.${1:*};
snippet to
	TweenMax.to(${1:assetName}, ${2:0.5}, {${3: /* arguments */}});${4}
snippet from
	TweenMax.from(${1:assetName}, ${2:0.5}, {${3: /* arguments */}});${4}
snippet delay
	TweenMax.delayedCall(${1:0.5}, ${2:functionName});${3}
snippet append
	timeline.append(${1});
snippet appendM
	timeline.appendMultiple([${4}], ${1:0}, TweenAlign.${2:NORMAL}, ${3:0});

# GAIA FRAMEWORK
snippet goto
	Gaia.api.goto(Pages.${1:HOME});${2}
snippet log
	GaiaDebug.log{${1}};

# PUSH BUTTON ENGINE
snippet impb
	import com.pblabs.engine.core.*;
	import com.pblabs.engine.entity.*;
	import com.pblabs.engine.components.*;
	import com.pblabs.rendering2D.*;
	import com.pblabs.rendering2D.ui.*;${1}
snippet component
	package ${1:// package}.components
	{
		import com.pblabs.engine.entity.EntityComponent;
		
		public class ${2:`Filename('', 'FooComponent')`} extends EntityComponent 
		{
			public function $2()
			{
				${3}
			}

			override protected function onAdd():void 
			{
			}

			override protected function onReset():void 
			{
			}

			override protected function onRemove():void 
			{
			}
		}
	}

# DESIGN PATTERNS
snippet singleton
	private static var instance:${1:Type};
	public static function getInstance():${1:Type}
	{
		if (instance == null) instance = new ${1:Type};
		return instance as ${1:Type};
	}
	${2}
